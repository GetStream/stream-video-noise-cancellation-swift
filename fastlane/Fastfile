default_platform :ios
skip_docs

sdk_name = 'StreamVideoNoiseCancellation'
github_repo = ENV['GITHUB_REPOSITORY'] || 'GetStream/stream-video-noise-cancellation-swift'

before_all do
  setup_ci if is_ci
end

lane :publish_release do |options|
  UI.user_error!('You need to pass the release version') if options[:version].nil?

  clean_products
  match_me
  file_path = build_xcframework
  zip_path = zip_xcframework(file_path: file_path)
  pod_lint
  version_bump_podspec(path: "#{sdk_name}.podspec", version_number: options[:version])
  update_spm(version: options[:version])
  push_changes(version: options[:version])
  publish_ios_sdk(
    skip_git_status_check: false,
    version: options[:version],
    sdk_names: [sdk_name],
    podspec_names: [sdk_name],
    github_repo: github_repo,
    changelog: "#{sdk_name} v#{options[:version]}",
    upload_assets: [zip_path]
  )
  clean_products
end

lane :build_xcframework do
  team_id = File.read('Matchfile').match(/team_id\("(.*)"\)/)[1]
  Dir.chdir('..') do
    output_directory = Dir.pwd
    sh("git clone git@github.com:#{github_repo}-private.git")

    Dir.chdir("#{github_repo.split('/').last}-private") do
      sh('make')
      FileUtils.mv("#{sdk_name}.xcframework", "#{output_directory}/#{sdk_name}.xcframework")
    end

    sh("cp -R LICENSE #{sdk_name}.xcframework/")
    sh("codesign --timestamp -v --sign 'Apple Distribution: Stream.io Inc (#{team_id})' #{sdk_name}.xcframework")
  end
  File.expand_path("../#{sdk_name}.xcframework")
end

lane :zip_xcframework do |options|
  zip_path = "#{options[:file_path]}.zip"
  sh("ditto -c -k --sequesterRsrc --keepParent #{options[:file_path]} #{zip_path}")
  zip_path
end

private_lane :update_spm do |options|
  Dir.chdir('..') do
    checksum = sh("swift package compute-checksum #{sdk_name}.zip").strip
    file_lines = File.readlines('Package.swift')
    file_data = ''

    file_lines.each do |line|
      url_pattern = %r{(releases/download/)[.0-9]+(/)}
      formatted_line =
        if line.include?('checksum')
          line.gsub(/(checksum: ")[a-z0-9]+(")/, "\\1#{checksum}\\2")
        elsif line.match(url_pattern)
          line.gsub(url_pattern, "\\1#{options[:version]}\\2")
        else
          line
        end

      file_data << formatted_line
    end

    File.open('./Package.swift', 'w') { |file| file << file_data }
  end
end

lane :push_changes do |options|
  sh('git add -A')
  sh("git commit -m 'Bump #{options[:version]}'")
  sh('git push')
end

lane :clean_products do
  Dir.chdir('..') do
    ["#{github_repo.split('/').last}-private", '*.xcframework', '*.zip'].each do |product|
      sh("rm -rf #{product}")
    end
  end
end

private_lane :appstore_api_key do
  @appstore_api_key ||= app_store_connect_api_key(
    key_id: 'MT3PRT8TB7',
    issuer_id: '69a6de96-0738-47e3-e053-5b8c7c11a4d1',
    key_content: ENV.fetch('APPSTORE_API_KEY', nil),
    in_house: false
  )
end

lane :pod_lint do
  pod_lib_lint(podspec: "#{sdk_name}.podspec", allow_warnings: true)
end

desc "If `readonly: true` (by default), installs all Certs and Profiles necessary for development and ad-hoc.\nIf `readonly: false`, recreates all Profiles necessary for development and ad-hoc, updates them locally and remotely."
lane :match_me do |options|
  custom_match(
    api_key: appstore_api_key,
    app_identifier: ['io.getstream.StreamVideoNoiseCancellation'],
    readonly: options[:readonly],
    register_device: options[:register_device]
  )
end
