default_platform :ios
skip_docs

require 'fileutils'

sdk_name = 'StreamVideoNoiseCancellation'
github_repo = ENV['GITHUB_REPOSITORY'] || 'GetStream/stream-video-noise-cancellation-swift'

lane :publish_release do |options|
  UI.user_error!('You need to pass the release version') if options[:version].nil?

  xcversion(version: '15.0.1') if is_ci
  clean_products
  build_xcframework
  compress_xcframework
  update_spm(version: options[:version])
  publish_ios_sdk(
    skip_pods: true,
    skip_git_status_check: false,
    version: options[:version],
    sdk_names: [sdk_name],
    podspec_names: [sdk_name],
    github_repo: github_repo,
    changelog: "#{sdk_name} v#{options[:version]}",
    upload_assets: ["Products/#{sdk_name}.zip"]
  )
  clean_products
end

lane :build_xcframework do
  FileUtils.mkdir_p('../Products')
  output_directory = File.expand_path("#{Dir.pwd}/../Products")
  Dir.chdir(output_directory) do
    sh("git clone git@github.com:#{github_repo}-private.git")
    Dir.chdir("#{github_repo.split('/').last}-private") do
      sh('make')
      FileUtils.mv("#{sdk_name}.xcframework", "#{output_directory}/#{sdk_name}.xcframework")
    end
  end
  team_id = File.read('Matchfile').match(/team_id\("(.*)"\)/)[1]
  sh("codesign --timestamp -v --sign 'Apple Distribution: Stream.io Inc (#{team_id})' #{output_directory}/#{sdk_name}.xcframework")
end

lane :compress_xcframework do
  Dir.chdir('..') do
    FileUtils.cp('LICENSE', 'Products/LICENSE')
    Dir.chdir('Products') do
      sh("zip -r #{sdk_name} ./#{sdk_name}.xcframework ./LICENSE")
    end
  end
end

private_lane :update_spm do |options|
  checksum = sh("swift package compute-checksum ../Products/#{sdk_name}.zip").strip
  Dir.chdir('..') do
    file_lines = File.readlines('Package.swift')
    file_data = ''

    file_lines.each do |line|
      url_pattern = %r{(releases/download/)[.0-9]+(/)}
      formatted_line =
        if line.include?('checksum')
          line.gsub(/(checksum: ")[a-z0-9]+(")/, "\\1#{checksum}\\2")
        elsif line.match(url_pattern)
          line.gsub(url_pattern, "\\1#{options[:version]}\\2")
        else
          line
        end

      file_data << formatted_line
    end

    File.open('./Package.swift', 'w') { |file| file << file_data }

    sh('git add -A')
    sh("git commit -m 'Bump #{options[:version]}'")
    sh('git push')
  end
end

lane :clean_products do
  Dir.chdir('..') do
    sh('rm -rf Products/')
  end
end
